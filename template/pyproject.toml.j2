[project]
name = "{{ project_slug }}"
version = "0.0.0"
description = "{{ project_short_description }}"
authors = [{ name="{{ author_name }}", email="<{{ author_email }}>"}]
maintainers = [{name="{{ author_name }}", email="<{{ author_email }}>"}]
license = "
    {%- if software_license == "Apache License 2.0" -%}
    Apache-2.0
    {%- elif software_license == "Artistic License 2.0" -%}
    Artistic-2.0
    {%- elif software_license == "BSD 2-Clause \"Simplified\" License" -%}
    BSD-2-Clause
    {%- elif software_license == "BSD 3-Clause Clear License" -%}
    BSD-3-Clause-Clear
    {%- elif software_license == "BSD 3-Clause \"New\" or \"Revised\" License" -%}
    BSD-3-Clause
    {%- elif software_license == "Boost Software License 1.0" -%}
    BSL-1.0
    {%- elif software_license == "Creative Commons Attribution 4.0" -%}
    CC-BY-4.0
    {%- elif software_license == "Creative Commons Attribution Share Alike 4.0" -%}
    CC-BY-SA-4.0
    {%- elif software_license == "Creative Commons Zero v1.0 Universal" -%}
    CC0-1.0
    {%- elif software_license == "Do What The F*ck You Want To Public License" -%}
    WTFPL
    {%- elif software_license == "Educational Community License v2.0" -%}
    ECL-2.0
    {%- elif software_license == "Eclipse Public License 1.0" -%}
    EPL-1.0
    {%- elif software_license == "Eclipse Public License 2.0" -%}
    EPL-2.0
    {%- elif software_license == "European Union Public License 1.1" -%}
    EUPL-1.1
    {%- elif software_license == "European Union Public License 1.2" -%}
    EUPL-1.2
    {%- elif software_license == "GNU Affero General Public License v3.0" -%}
    AGPL-3.0
    {%- elif software_license == "GNU General Public License v2.0" -%}
    GPL-2.0
    {%- elif software_license == "GNU General Public License v3.0" -%}
    GPL-3.0
    {%- elif software_license == "GNU Lesser General Public License v2.1" -%}
    LGPL-2.1
    {%- elif software_license == "GNU Lesser General Public License v3.0" -%}
    LGPL-3.0
    {%- elif software_license == "ISC License" -%}
    ISC
    {%- elif software_license == "LaTeX Project Public License v1.3c" -%}
    LPPL-1.3c
    {%- elif software_license == "MIT License" -%}
    MIT
    {%- elif software_license == "Mozilla Public License 2.0" -%}
    MPL-2.0
    {%- elif software_license == "Microsoft Public License" -%}
    MS-PL
    {%- elif software_license == "Microsoft Reciprocal License" -%}
    MS-RL
    {%- elif software_license == "University of Illinois/NCSA Open Source License" -%}
    NCSA
    {%- elif software_license == "SIL Open Font License 1.1" -%}
    OFL-1.1
    {%- elif software_license == "Open Software License 3.0" -%}
    OSL-3.0
    {%- elif software_license == "PostgreSQL License" -%}
    PostgreSQL
    {%- elif software_license == "The Unlicense" -%}
    Unlicense
    {%- elif software_license == "zlib License" -%}
    Zlib
    {%- endif %}"
requires-python = ">=3.11"
readme = "README.md"
keywords = ["{{ project_slug }}", "api", "async", "client"]
classifiers = [
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: {{ software_license }}",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["dependencies"]
packages = [
  { include = "{{ package_name }}", from = "src"},
]

[tool.poetry.dependencies]
python = "^3.11"
{%- for name, spec in versions.main.items() %}
{{ name }} = "{{ spec }}"
{%- endfor %}

[project.urls]
homepage = "https://github.com/{{ github_username }}/python-{{ project_slug }}"
repository = "https://github.com/{{ github_username }}/python-{{ project_slug }}"
documentation = "https://github.com/{{ github_username }}/python-{{ project_slug }}"
"Bug Tracker" = "https://github.com/{{ github_username }}/python-{{ project_slug }}/issues"
Changelog = "https://github.com/{{ github_username }}/python-{{ project_slug }}/releases"

[tool.poetry.group.dev.dependencies]
{%- for name, spec in versions.dev.items() %}
{%- if spec is string %}
{{ name }} = "{{ spec }}"
{%- elif spec.version is defined and spec.extras is defined %}
{{ name }} = { version = "{{ spec.version }}", extras = [{{ spec.extras | join(', ') | replace("'", '"') }}] }
{%- elif spec.version is defined %}
{{ name }} = { version = "{{ spec.version }}" }
{%- else %}
{{ name }} = "{{ spec }}"
{%- endif %}
{%- endfor %}

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["{{ package_name }}"]

[tool.coverage.report]
fail_under = 90
show_missing = true

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.11"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T"]

[tool.pylint."MESSAGES CONTROL"]
disable= [
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
  "ANN401",  # Opinioated warning on disallowing dynamically typed expressions
  "D203",    # Conflicts with other rules
  "D213",    # Conflicts with other rules
  "D417",    # False positives in some occasions
  "PLR2004", # Just annoying, not really useful
  "SLOT000", # Has a bug with enums: https://github.com/astral-sh/ruff/issues/5748

  # Conflicts with the Ruff formatter
  "COM812",
]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["{{ package_name }}"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
